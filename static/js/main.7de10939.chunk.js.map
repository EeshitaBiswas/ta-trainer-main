{"version":3,"sources":["components/CardViewer.tsx","components/UserList.tsx","components/ControlPanel.tsx","utilities/data.ts","components/AddCardModal.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CardViewer","card","answerRevealed","Col","Body","Title","Text","prompt","answer","UserList","users","setUsers","items","onChange","newUsers","LOCAL_STORAGE_USERS","INITIAL_USERS","id","text","ControlPanel","setCard","reveal","deck","showAddCardModal","useState","rawUsers","localStorage","getItem","JSON","parse","getLocalStorageUsers","Button","onClick","Math","floor","random","length","className","shuffledUsers","array","randomIndex","currentIndex","shuffle","setItem","stringify","variant","AddCardModal","visible","setVisible","addCard","setPrompt","setAnswer","hide","Modal","show","onHide","Header","closeButton","Form","Group","controlId","Label","Control","as","rows","value","ev","target","Footer","kind","App","CARDS","activeCard","setActiveCard","setDeck","Container","Row","newCard","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7de10939.chunk.js","sourcesContent":["import {Col, Card as BootstrapCard} from 'react-bootstrap';\nimport { Card } from '../interfaces/card';\n\nexport function CardViewer({card, answerRevealed}:\n  {card: Card, answerRevealed: boolean}): JSX.Element {\n  return <Col>\n    <BootstrapCard>\n      <BootstrapCard.Body>\n        <BootstrapCard.Title>Card Viewer</BootstrapCard.Title>\n        <BootstrapCard.Text>\n          <strong>Prompt</strong>: {card.prompt}\n        </BootstrapCard.Text>\n        {answerRevealed && <BootstrapCard.Text>\n          <strong>Answer</strong>: {card.answer}\n        </BootstrapCard.Text>}\n      </BootstrapCard.Body>\n    </BootstrapCard>\n  </Col>\n}","import EditableDndList, { Task } from \"editable-dnd-list\";\n\n\nexport function UserList({users, setUsers}: {users: Task[], setUsers: (t: Task[])=>void}): JSX.Element {\n  \n\n  function handleChange(newUsers: Task[]): void {\n    setUsers(newUsers);\n  }\n\n  return <EditableDndList items={users} onChange={handleChange} />;\n}","import { Button, Col } from 'react-bootstrap';\nimport { Card } from '../interfaces/card';\nimport CARDS from '../assets/cards.json';\nimport { getRandomElement, shuffle } from '../utilities/data';\nimport { UserList } from './UserList';\nimport { useState } from 'react';\nimport { Task as User } from 'editable-dnd-list';\n\nexport const LOCAL_STORAGE_USERS = 'ta-trainer-users';\n\nexport const INITIAL_USERS: User[] = [\n  {id: '1', text: \"Dr. Bart\"},\n  {id: '2', text: \"Ada Bart\"},\n  {id: '3', text: \"Babbage Bart\"},\n  {id: '4', text: \"Pumpkin Bart\"},\n  {id: '5', text: \"Ellie Bart\"},\n];\n\nexport function getLocalStorageUsers(): User[] {\n  let rawUsers: string|null = localStorage.getItem(LOCAL_STORAGE_USERS);\n  if (rawUsers === null) {\n    return [...INITIAL_USERS];\n  } else {\n    return JSON.parse(rawUsers);\n  }\n}\n\nexport function ControlPanel({setCard, reveal, answerRevealed, deck, showAddCardModal}: \n  {setCard: (c: Card)=>void, reveal: (r: boolean) =>void, answerRevealed: boolean,\n    showAddCardModal: (b: boolean) => void, deck: Card[]}): JSX.Element {\n  const [users, setUsers] = useState<User[]>(getLocalStorageUsers());\n  \n  \n  function setRandomCard() {\n    reveal(false);\n    setCard(getRandomElement(deck))\n  }\n\n  function shuffleUsers() {\n    let shuffledUsers: User[] = shuffle(users);\n    setUsers([...shuffledUsers]);\n  }\n\n  function save() {\n    localStorage.setItem(LOCAL_STORAGE_USERS, JSON.stringify(users));\n  }\n\n  function addNewCard() {\n    showAddCardModal(true);\n  }\n\n  return <Col>\n    <h1>Control Panel</h1>\n    <UserList users={users} setUsers={setUsers}></UserList>\n    <Button onClick={setRandomCard} className=\"m-4\">Swap Current Card</Button>\n    <Button onClick={() => reveal(!answerRevealed)} className=\"m-4\">Reveal Answer</Button>\n    <Button onClick={shuffleUsers} className=\"m-4\">Shuffle Users</Button>\n    <Button onClick={save} className=\"m-4\" variant=\"success\">Save</Button>\n    <Button onClick={addNewCard} className=\"m-4\">Add new card</Button>\n\n  </Col>\n}","// https://stackoverflow.com/a/5915122/1718155\n/**\n * Grab a random element from a list\n * @param items Any kind of list \n * @returns One randomly chosen element\n */\nexport function getRandomElement<T>(items: T[]): T {\n  return items[Math.floor(Math.random()*items.length)];\n}\n\n// https://stackoverflow.com/a/2450976/1718155\n/**\n * Shuffles an array in-place\n * @param array Any array of elements\n * @returns The same array, shuffled (modified in-place)\n */\nexport function shuffle<T>(array: T[]): T[] {\n  let currentIndex = array.length,  randomIndex;\n\n  // While there remain elements to shuffle...\n  while (currentIndex !== 0) {\n\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex--;\n\n    // And swap it with the current element.\n    [array[currentIndex], array[randomIndex]] = [\n      array[randomIndex], array[currentIndex]];\n  }\n\n  return array;\n}\n","import { useState } from \"react\";\nimport { Button, Form, Modal } from \"react-bootstrap\";\nimport { Card } from '../interfaces/card';\n\nexport function AddCardModal({visible, setVisible, addCard}: \n  {visible: boolean, setVisible: (b: boolean)=>void,\n  addCard: (c: Card) => void}): JSX.Element {\n    const [prompt, setPrompt] = useState<string>(\"PROMPT TEXT\");\n    const [answer, setAnswer] = useState<string>(\"ANSWER TEXT\");\n\n    function saveCard() {\n      addCard({\n        id: Math.random(),\n        kind: \"Custom\",\n        prompt, answer\n      });\n      setVisible(false);\n    }\n\n    const hide = () => setVisible(false);\n    return (\n    <Modal show={visible} onHide={hide}>\n      <Modal.Header closeButton>\n        <Modal.Title>Add New Card</Modal.Title>\n      </Modal.Header>\n\n      <Modal.Body>\n      <Form>\n        <Form.Group className=\"mb-3\" controlId=\"addCardForm.promptTextArea\">\n          <Form.Label>Prompt</Form.Label>\n          <Form.Control as=\"textarea\" rows={3}\n            value={prompt}\n            onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setPrompt(ev.target.value)}/>\n        </Form.Group>\n        <Form.Group className=\"mb-3\" controlId=\"addCardForm.answerTextArea\">\n          <Form.Label>Suggested Answer</Form.Label>\n          <Form.Control as=\"textarea\" rows={3} \n            value={answer}\n            onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setAnswer(ev.target.value)}/>\n        </Form.Group>\n      </Form>\n      </Modal.Body>\n\n      <Modal.Footer>\n        <Button variant=\"secondary\" onClick={hide}>Close</Button>\n        <Button variant=\"primary\" onClick={saveCard}>Save changes</Button>\n      </Modal.Footer>\n    </Modal>)\n}","import React, { useState } from 'react';\nimport './App.css';\nimport CARDS from './assets/cards.json';\nimport { CardViewer } from './components/CardViewer';\nimport { ControlPanel } from './components/ControlPanel';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Container, Row } from 'react-bootstrap';\nimport { Card } from './interfaces/card';\nimport { AddCardModal } from './components/AddCardModal';\n\nfunction App(): JSX.Element {\n  const [activeCard, setActiveCard] = useState<Card>(CARDS[0] as Card);\n  const [answerRevealed, reveal] = useState<boolean>(false);\n  const [visible, setVisible] = useState<boolean>(false);\n  const [deck, setDeck] = useState<Card[]>(CARDS);\n\n  function addCard(newCard: Card) {\n    setDeck([...deck, newCard]);\n  }\n\n  return (\n    <Container className=\"App\">\n      <Row>\n        <ControlPanel\n          showAddCardModal={setVisible}\n          setCard={setActiveCard}\n          reveal={reveal}\n          deck={deck}\n          answerRevealed={answerRevealed}></ControlPanel>\n        <CardViewer card={activeCard} answerRevealed={answerRevealed}></CardViewer>\n        <AddCardModal visible={visible} setVisible={setVisible}\n          addCard={addCard}></AddCardModal>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}